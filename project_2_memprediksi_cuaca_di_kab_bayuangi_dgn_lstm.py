# -*- coding: utf-8 -*-
"""Project 2 : Memprediksi Cuaca di Kab Bayuangi dgn LSTM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OQglvK1vxJ21eKx9LDhGH-DLO_4qqbEN

# PROJECT 2 : MEMPREDIKSI CUACA DI KAB. BANYUWANGI DENGAN METODE LSTM

**NAMA : MOCHAMMAD TOYIB <BR>
NIM : 2121400015 <BR>
MATKUL : DATA MINING & PEMBELAJARAN MESIN**

## PREPROCESSING
"""

import pandas as pd
import numpy as np

# Membaca file Excel
excel_file = pd.read_excel('/content/dataset_full.xlsx')

# Membuat DataFrame dari data Excel
df = pd.DataFrame(excel_file)

#Menampilkan data
print(df)

# Membuat DataFrame dari data Excel
df = pd.DataFrame(excel_file)

# Melakukan interpolasi untuk mengisi nilai yang hilang
df_interpolate = df.interpolate()

# Menampilkan DataFrame hasil interpolasi
print(df_interpolate)

# Menyimpan hasil DataFrame setelah interpolasi ke file Excel
df_interpolate.to_excel("dataset_clean.xlsx", index=False)

"""## MEMBUAT MODEL LSTM"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
import matplotlib.pyplot as plt
from keras.optimizers import Adam

# Membaca file Excel
excel_file = pd.read_excel("dataset_clean.xlsx")
df = pd.DataFrame(excel_file)
print(df)

# Memisahkan fitur input dan output
input_features = ['Tn', 'Tx', 'Tavg', 'RH_avg', 'RR', 'ss']
output_features = ['Tn', 'Tx', 'Tavg', 'RH_avg', 'RR', 'ss']
X = df[input_features].values
y = df[output_features].values
print(X)
print(y)

# Normalisasi data
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)
y_scaled = scaler.fit_transform(y)
print(y_scaled)

# Pembagian data menjadi train dan test
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_scaled, test_size=0.2, shuffle=False)

timesteps = 30  # Menggunakan data 30 hari sebelumnya menjadi input LSTM
n_features_input = len(input_features)
n_features_output = len(output_features)

# Membuat urutan data
def create_sequences(X, y, time_steps):
    X_seq, y_seq = [], []
    for i in range(len(X) - time_steps):
        X_seq.append(X[i : i + time_steps])
        y_seq.append(y[i + time_steps])
    return np.array(X_seq), np.array(y_seq)

X_train_seq, y_train_seq = create_sequences(X_train, y_train, timesteps)
X_test_seq, y_test_seq = create_sequences(X_test, y_test, timesteps)

# Membangun model LSTM
model = Sequential()
model.add(LSTM(60, input_shape=(timesteps, n_features_input), return_sequences=True))
model.add(LSTM(60))
model.add(Dense(n_features_output))
model.compile(optimizer='adam', loss='mae')

# Menyimpan model ke dalam variabel his
his = model.fit(X_train_seq, y_train_seq, epochs=50, batch_size=32)

# Melakukan prediksi
predictions = model.predict(X_test_seq)
predictions = scaler.inverse_transform(predictions)
y_test_asli = scaler.inverse_transform(y_test_seq)
mae = np.mean(np.abs(predictions - y_test_asli), axis=0)

# Menampilkan MAE untuk masing-masing fitur
for i, feature in enumerate(output_features):
    print(f"MAE untuk fitur {feature}: {mae[i]}")

# Menghitung threshold MAE
threshold_mae_Tn = (df['Tn'].max() - df['Tn'].min()) * 10 / 100
threshold_mae_Tx = (df['Tx'].max() - df['Tx'].min()) * 10 / 100
threshold_mae_Tavg = (df['Tavg'].max() - df['Tavg'].min()) * 10 / 100
threshold_mae_RH_avg = (df['RH_avg'].max() - df['RH_avg'].min()) * 10 / 100
threshold_mae_RR = (df['RR'].max() - df['RR'].min()) * 10 / 100
threshold_mae_ss = (df['ss'].max() - df['ss'].min()) * 10 / 100

print(f"Threshold Tn: {threshold_mae_Tn}")
print(f"Threshold Tx: {threshold_mae_Tx}")
print(f"Threshold Tavg: {threshold_mae_Tavg}")
print(f"Threshold RH_avg: {threshold_mae_RH_avg}")
print(f"Threshold RR: {threshold_mae_RR}")
print(f"Threshold ss: {threshold_mae_ss}")

import pandas as pd
from IPython.display import display, HTML

# Menghitung MAE (contoh nilai, ganti dengan perhitungan MAE yang sebenarnya)
mae = [0.5443470429720948, 1.721648250214042, 0.4764776768096506, 3.0546312097000747, 793.2480357824845, 1.40572852419936]  # Ini hanya contoh, pastikan Anda menghitung MAE yang sebenarnya

# Menghitung threshold MAE
threshold_mae_Tn = (df['Tn'].max() - df['Tn'].min()) * 10 / 100
threshold_mae_Tx = (df['Tx'].max() - df['Tx'].min()) * 10 / 100
threshold_mae_Tavg = (df['Tavg'].max() - df['Tavg'].min()) * 10 / 100
threshold_mae_RH_avg = (df['RH_avg'].max() - df['RH_avg'].min()) * 10 / 100
threshold_mae_RR = (df['RR'].max() - df['RR'].min()) * 10 / 100
threshold_mae_ss = (df['ss'].max() - df['ss'].min()) * 10 / 100

# Membuat DataFrame untuk menampilkan MAE dan Threshold
mae_threshold_data = {
    'Pengukuran': ['MAE', 'Threshold'],
    'Tn': [mae[0], threshold_mae_Tn],
    'Tx': [mae[1], threshold_mae_Tx],
    'Tavg': [mae[2], threshold_mae_Tavg],
    'RH_avg': [mae[3], threshold_mae_RH_avg],
    'RR': [mae[4], threshold_mae_RR],
    'ss': [mae[5], threshold_mae_ss]
}

mae_threshold_df = pd.DataFrame(mae_threshold_data)

# Menampilkan DataFrame dengan tampilan HTML yang bagus dan isi tabel di tengah
html_table = mae_threshold_df.to_html(index=False, border=1, justify='center')

display(HTML(html_table))

"""## VISUALISASI & EVALUASI MODEL LSTM"""

model_history = his.history
loss = model_history['loss']

plt.figure()
plt.plot(loss, label='MAE')  # Menampilkan grafik Mean Absolute Error (MAE)
plt.title("Mean Absolute Error (MAE)")
plt.xlabel("Epochs")
plt.ylabel("Loss")
plt.legend()
plt.savefig("MAE.png")
plt.show()

import matplotlib.pyplot as plt

fig, axes = plt.subplots(2, 3, figsize=(15, 10))  # Membuat 2 baris dan 3 kolom subplot

target_indices = range(6)
titles = [
    "Temperatur Minimum (Tn)", "Temperatur Maximum (Tx)", "Temperatur Rata-Rata (Tavg)",
    "Kelembapan Rata-Rat (RH_avg)", "Curah Hujan (RR)", "Lamanya Penyinaran Matahari (ss)"
]

# Loop untuk membuat plot pada setiap subplot
for i, ax in enumerate(axes.flat):
    ax.plot(y_test_asli[:, target_indices[i]], label="Aktual")  # Menampilkan data aktual
    ax.plot(predictions[:, target_indices[i]], label="Prediksi")  # Menampilkan data prediksi
    ax.set_xlabel("Index")
    ax.set_ylabel(output_features[target_indices[i]])
    ax.set_title(titles[i])
    ax.legend()

plt.tight_layout()
plt.savefig('hasil_plot.png')  # Menyimpan gambar
plt.show()

target_index = 0
plt.figure(figsize=(10, 5))
plt.plot(y_test_asli[:, target_index], label="Aktual")  # Menampilkan data aktual
plt.plot(predictions[:, target_index], label="Prediksi")  # Menampilkan data prediksi
plt.xlabel("Index")
plt.ylabel(output_features[target_index])
plt.title("Temperatur Minimum (Tn)")
plt.legend()
plt.show()

target_index = 1
plt.figure(figsize=(10, 5))
plt.plot(y_test_asli[:, target_index], label="Aktual")  # Menampilkan data aktual
plt.plot(predictions[:, target_index], label="Prediksi")  # Menampilkan data prediksi
plt.xlabel("Index")
plt.ylabel(output_features[target_index])
plt.title("Temperatur Maximum (Tx)")
plt.legend()
plt.show()

target_index = 2
plt.figure(figsize=(10, 5))
plt.plot(y_test_asli[:, target_index], label="Aktual")  # Menampilkan data aktual
plt.plot(predictions[:, target_index], label="Prediksi")  # Menampilkan data prediksi
plt.xlabel("Index")
plt.ylabel(output_features[target_index])
plt.title("Temperatur Rata-Rata (Tavg)")
plt.legend()
plt.show()

target_index = 3
plt.figure(figsize=(10, 5))
plt.plot(y_test_asli[:, target_index], label="Aktual")  # Menampilkan data aktual
plt.plot(predictions[:, target_index], label="Prediksi")  # Menampilkan data prediksi
plt.xlabel("Index")
plt.ylabel(output_features[target_index])
plt.title("Kelembapan Rata-Rata (RH_avg)")
plt.legend()
plt.show()

target_index = 4
plt.figure(figsize=(10, 5))
plt.plot(y_test_asli[:, target_index], label="Aktual")  # Menampilkan data aktual
plt.plot(predictions[:, target_index], label="Prediksi")  # Menampilkan data prediksi
plt.xlabel("Index")
plt.ylabel(output_features[target_index])
plt.title("Curah Hujan (RR)")
plt.legend()
plt.show()

target_index = 5
plt.figure(figsize=(10, 5))
plt.plot(y_test_asli[:, target_index], label="Aktual")  # Menampilkan data aktual
plt.plot(predictions[:, target_index], label="Prediksi")  # Menampilkan data prediksi
plt.xlabel("Index")
plt.ylabel(output_features[target_index])
plt.title("Lamanya Penyinaran Matahari (ss)")
plt.legend()
plt.show()

"""## MENGEKSPOR HASIL PREDIKSI"""

import pandas as pd
from IPython.display import display, HTML

# Inisialisasi daftar nama kolom
output_features = ["Tn", "Tx", "Tavg", "RH_avg", "RR", "ss"]

# Inisialisasi DataFrame kosong untuk menyimpan semua data
all_data_export = pd.DataFrame()

# Loop untuk menambahkan data asli dan prediksi ke DataFrame
for target_index in range(6):
    # Buat DataFrame sementara untuk kolom saat ini
    temp_df = pd.DataFrame({
        f"{output_features[target_index]} Asli": y_test_asli[:, target_index],
        f"{output_features[target_index]} Prediksi": predictions[:, target_index]
    })

    # Gabungkan DataFrame sementara ke DataFrame utama
    all_data_export = pd.concat([all_data_export, temp_df], axis=1)

# Ekspor data ke file Excel tanpa indeks
all_data_export.to_excel("prediksi_all.xlsx", index=False)

# Menghapus indeks dan mempercantik tampilan dengan bingkai tabel
all_data_export.reset_index(drop=True, inplace=True)

# Menambahkan kolom penomoran dimulai dari 1
all_data_export.insert(0, 'No', range(1, len(all_data_export) + 1))

# Menampilkan DataFrame dengan bingkai tabel
display(HTML(all_data_export.to_html(index=False, border=1)))

# Inisialisasi indeks target
target_index = 0

# Buat DataFrame dengan kolom "Data Asli" dan "Hasil Prediksi"
data_export = pd.DataFrame({
    "Data Asli": y_test_asli[:, target_index],
    "Hasil Prediksi": predictions[:, target_index]
})

# Ekspor data ke file Excel tanpa indeks
data_export.to_excel("prediksi_Tn.xlsx", index=False)

# Inisialisasi indeks target
target_index = 0

# Buat DataFrame dengan kolom "Data Asli" dan "Hasil Prediksi"
data_export = pd.DataFrame({
    "Data Asli": y_test_asli[:, target_index],
    "Hasil Prediksi": predictions[:, target_index]
})

# Ekspor data ke file Excel tanpa indeks
data_export.to_excel("prediksi_Tx.xlsx", index=False)

# Inisialisasi indeks target
target_index = 0

# Buat DataFrame dengan kolom "Data Asli" dan "Hasil Prediksi"
data_export = pd.DataFrame({
    "Data Asli": y_test_asli[:, target_index],
    "Hasil Prediksi": predictions[:, target_index]
})

# Ekspor data ke file Excel tanpa indeks
data_export.to_excel("prediksi_Tavg.xlsx", index=False)

# Inisialisasi indeks target
target_index = 0

# Buat DataFrame dengan kolom "Data Asli" dan "Hasil Prediksi"
data_export = pd.DataFrame({
    "Data Asli": y_test_asli[:, target_index],
    "Hasil Prediksi": predictions[:, target_index]
})

# Ekspor data ke file Excel tanpa indeks
data_export.to_excel("prediksi_RH_avg.xlsx", index=False)

# Inisialisasi indeks target
target_index = 0

# Buat DataFrame dengan kolom "Data Asli" dan "Hasil Prediksi"
data_export = pd.DataFrame({
    "Data Asli": y_test_asli[:, target_index],
    "Hasil Prediksi": predictions[:, target_index]
})

# Ekspor data ke file Excel tanpa indeks
data_export.to_excel("prediksi_RR.xlsx", index=False)

# Inisialisasi indeks target
target_index = 0

# Buat DataFrame dengan kolom "Data Asli" dan "Hasil Prediksi"
data_export = pd.DataFrame({
    "Data Asli": y_test_asli[:, target_index],
    "Hasil Prediksi": predictions[:, target_index]
})

# Ekspor data ke file Excel tanpa indeks
data_export.to_excel("prediksi_ss.xlsx", index=False)